import LayoutMain from "../../components/Layout/layoutMain";
import Head from "next/dist/next-server/lib/head";
import styles from "../../styles/pages/category/category.module.scss";
import Card from "../../components/cards/card";
import { Swiper, SwiperSlide } from "swiper/react";
import SwiperCore, { Navigation, Thumbs } from "swiper/core";
import { useEffect, useState } from "react";
import LargeCounter from "../../components/counter/largeCounter";
import MainColorButton from "../../components/buttons/mainColorButton";
import ShoppingCartIcon from "../../public/icons/shoppingCart";
import { getData } from "../../api/fetch";
import Swal from "sweetalert2";
import { API, BASE, PAGE } from "../../constants";
import router from "next/router";
import { addCart } from "../../utils/cartMethods";
import { useRecoilState, useRecoilValue } from "recoil";
import {
  cartChangeTrigger,
  categoryChangeTrigger,
  isAuthed,
} from "../../states/index.atom";
import slugify from "slugify";
import Link from "next/link";
import HorizontalMiddleCartBorderedButton from "../../components/buttons/cards/horizontalMiddleCartBorderedButton";

function ProductsPage() {
  const [page, setPage] = useState(1);
  const [category, setCategory] = useState("");
  const [countOfPages, setCountOfPages] = useState(1);
  const [products, setProducts] = useState([]);
  const [pageLoading, setPageLoading] = useState(true);
  const isAuth = useRecoilValue(isAuthed);
  const categoryChange = useRecoilValue(categoryChangeTrigger);
  const [cartTrigger, setCartTrigger] = useRecoilState(cartChangeTrigger);
  const getProducts = async (categoryName = category, pageNow = page) => {
    await getData(
      "/api/product/getProductsPageByPage/" + categoryName + "/" + pageNow
    )
      .then((res) => {
        console.log(res.data);
        if (res.data.products[0]) {
          setProducts(res.data.products);
          setCountOfPages(res.data.countOfPages);
        } else {
          Swal.fire({
            icon: "info",
            title: "Üzgünüz",
            text: "Bu kategoriye ait ürün bulunamadı.",
          });
        }
      })
      .catch((err) => {
        console.log(err);
        Swal.fire({
          icon: "error",
          title: "Hata!",
          text: "Lütfen sayfayı yenileyiniz. Eğer tekrar bu hatayı alırsanız bu hatayı en kısa sürede düzelteceğiz.",
        });
      });
  };
  useEffect(() => {
    (async () => {
      const path =
        window.location.pathname.split("/")[
          window.location.pathname.split("/").length - 1
        ];
      const categoryName = path.split("_")[0];
      const pageNow = path.split("_")[1];
      setCategory(categoryName);
      setPage(pageNow);
      await getProducts(categoryName, pageNow);
      setPageLoading(false);
    })();
  }, [categoryChange]);
  //isAuth added in dependency because link routing not detecting route.
  const onAddCart = (product, event) => {
    event.preventDefault();
    setCartTrigger(!cartTrigger);
    addCart({ productId: product.id, count: 50, checked: true }, isAuth);
  };
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <LayoutMain pageLoading={pageLoading}>
        <div className={styles.container}>
          {products.map((item, index) => {
            return (
              <Link href={"/product/" + slugify(item.title) + "-" + item.id}>
                <a>
                  <div className={styles.productContainer}>
                    <div className={styles.imgContainer}>
                      <img loading="lazy" src={API.imgUrl + item.photos[0]} />
                    </div>

                    <div className={styles.productDetails}>
                      <h1>{item.title}</h1>
                      <div>{item.price} TL</div>
                      <HorizontalMiddleCartBorderedButton
                        onClick={(e) => {
                          onAddCart(item, e);
                        }}
                        width="100%"
                      />
                    </div>
                  </div>
                </a>
              </Link>
            );
          })}
        </div>
      </LayoutMain>
    </div>
  );
}

export default ProductsPage;
