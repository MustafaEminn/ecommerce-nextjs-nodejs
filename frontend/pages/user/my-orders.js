import Head from "next/head";
import styles from "../../styles/pages/user/myOrders.module.scss";
import { API, PAGE } from "../../constants";
import Divider from "../../components/divider/divider";
import { getData, putData } from "../../api/fetch";
import { useEffect, useState } from "react";
import Swal from "sweetalert2";
import jwtDecode from "jwt-decode";
import LayoutSidebar from "../../components/Layout/layoutSidebar";
import InputText from "../../components/inputs/inputText";
import InputSelect from "../../components/inputs/inputSelect";
import { cityDistrict } from "../../constants/cityDistrict";
import router from "next/router";
import Form from "../../components/forms/form";
import InputTextbox from "../../components/inputs/inputTextbox";
import Card from "../../components/cards/card";
import MainColorButton from "../../components/buttons/mainColorButton";
import { getFormValues } from "../../utils/getFormValues";
import { resetFormValues } from "../../utils/resetFormValues";
import Spacer from "../../components/Spacer/spacer";

export default function MyOrders() {
  const [pageLoading, setPageLoading] = useState(true);
  const [orders, setOrders] = useState([]);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getOrders = async () => {
    if (localStorage.getItem("token")) {
      var productIds = [];
      await getData("/api/order/getOrders")
        .then((res) => {
          setOrders(res.data.orders);
          res.data.orders.map((item) => {
            return productIds.push(item.productId);
          });
        })
        .catch((err) => {
          Swal.fire({
            icon: "error",
            title: "Hata!",
            text: "Lütfen sayfayı yenileyiniz. Eğer tekrar bu hatayı alırsanız bu hatayı en kısa sürede düzelteceğiz.",
          });
        });

      const getProductFetch = async (id) => {
        return await getData("/api/product/getProductById/" + id)
          .then((res) => {
            return res.data.product[0];
          })
          .catch((err) => {
            return false;
          });
      };

      var gettingProducts = [];
      for await (const productItem of productIds.map((item) =>
        getProductFetch(item)
      )) {
        if (productItem) {
          var decodedPhotos = JSON.parse(productItem.photos);
          var decodedProduct = { ...productItem, photos: decodedPhotos };
          gettingProducts.push(decodedProduct);
        } else {
          // False is mean customer buyed product but product not selling now
          gettingProducts.push(false);
        }
      }
      setProducts(gettingProducts);
      setPageLoading(false);
    } else {
      router.push(PAGE.login.href);
    }
  };

  useEffect(() => {
    (async () => {
      await getOrders();
    })();
  }, []);
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <LayoutSidebar pageLoading={pageLoading}>
        <div className={styles.container}>
          {products.length > 0 &&
            orders.map((item, index) => {
              return (
                <div key={index}>
                  <Card width="100%">
                    <div>
                      <img src={products[index]?.photos[0]} />
                    </div>
                  </Card>
                  <Spacer top="15px" />
                </div>
              );
            })}
        </div>
      </LayoutSidebar>
    </div>
  );
}
